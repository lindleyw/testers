TODO

Consider:

Can we watch:
  - a group of modules, or
  - main programs (with associated cpanfiles like Carton), or
  - a private repository (like a subset mirror of cpan)

so that any changes to any *dependency* will trigger a test of all the
affected modules?

Can this be integrated with an automated build or continuous-
integration system so that entire applications can be "pre-flight"
tested before deployment?


2018-01-11 with Doug, Ray

cpanm module@version

but that does not give you control of dependencies
so... how do we totally control for regression testing?

consider looking at stratopan.com and Pinto
...and Nigel's tests

or: Docker.  Mount a set of depencies which all get deleted when
virtual machine closes, unless you specifically ask for them to remain

Slaven rezik ... has been trying to work on external/system
dependencies: cpan-sysdeps -- mapping to cpan modules, packages,
system packages probably something we want to use, to ensure that we
can indeed test a module



in valid.v3.json

...summary/{dist}/{version} ...
[add:]
{ "name": "grade",
  "in": "query"
  "description": "Filter results by grade",
  "type": "string",
  "enum": ["pass",.....


and then CPAN/TEsters/API/Controller/Summary.pm

in sub summary ($c) { ... } we add the validation->param(...)


and in t/controller/summary.t   ... add tests


================

We can retrieve the entire list of test results from, e.g.,

http://www.cpantesters.org/static/distro/M/Mojolicious.js

---begin---
use Mojo::JSON;
use Mojo::UserAgent;
$u = Mojo::UserAgent->new->get('http://www.cpantesters.org/static/distro/M/Mojolicious.json');
$j = Mojo::JSON::decode_json($u->res->body);

use POSIX;
($osname, $hostname, $kernel_version) = (POSIX::uname())[0..2]; 
$match_osvers = ($kernel_version =~ /^(\d+\.\d+)/, $1);

@matching_tests = 
grep { $_->{version} eq '7.60' &&            # Module version
     $_->{platform} eq $Config{archname} &&  # Matching our architecture, O.S., OS version (roughly),
     fc($_->{osname}) eq fc($Config{osname}) &&
     $match_osvers eq ($_->{osvers} =~ /^(\d+\.\d+)/, $1) &&
     $_->{perl} eq $Config{version}          # and Perl version
  } @{$j};

---end---

and in sqlite:

select distinct(name) from releases,tests where releases.id=tests.release_id order by name;

then pull the version number from the end of the revision name
select a unique list of those
and get the file as above, check for matching tests

NOTE: need to keep a list for each module name, of the module_ids and
matching test_ids

TODO BILL:

$tests { module_name } { version } { osname } { osversion } { arch } [ { guid, local_flag, grade } ]
