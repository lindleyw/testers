TODO

  NOTE:  Are we doing the right thing, for tests that pass????

  TODO:  Be sure we do NOT send reports with grade=na or timeouts/failure-to-execute





- Use MetaCPAN::Client;
  $mcpan = MetaCPAN::Client->new();
  $dist = $mcpan->release($mcpan->package('Text::Wrap')->data->{distribution});
 
  ^^ retrieves dependency data for a given distribution name
  See also the {download_url} result parameter.

- When release grade is null, in most cases these reports should not
  be submitted.  It means "something went wrong" and that could have
  many reasons (timeout, process abort, disk failure...).  Require the
  use of a 'force' flag to actually submit them. Also ensure grade is
  set to 'unknown' and not null.

- improve dashboard at project web root to include statistics and
  links to tests enqueued and being processed.  Possibly add a textbox
  to permit enqueueing a specific module (and optionally version
  number).

- Add a parameter to the 'update' endpoint to permit also enqueueing a
  further update with delayed execution at a specified number of
  seconds in the future.  Ensure there is no pending update before
  doing so.  Also need a way (other parameter, other endpoint) to
  delete any pending update. This will permit unattended operation.

- Modify how we call Capture::Tiny to send output to some sort of web
  socket (maybe?) or at least not to echo on worker's console
  [[RAY to investigate]]

- Continue integration with improvements to CPAN::Testers::API

- Update the Yancy configuration with `type => 'textarea'` for
  multi-line fields.

- Future: Update the Yancy configuration with extended field
  information with view links for test reports (and possibly others)
  to new endpoint(s) using Mojo templates.  It would be convenient to
  view the combined log, the STDERR-only error log, and other data in
  a more readable format.

---


Consider:

Can we watch:
  - a group of modules, or
  - main programs (with associated cpanfiles like Carton), or
  - a private repository (like a subset mirror of cpan)

so that any changes to any *dependency* will trigger a test of all the
affected modules?

Can this be integrated with an automated build or continuous-
integration system so that entire applications can be "pre-flight"
tested before deployment?


2018-01-11 with Doug, Ray

cpanm module@version

but that does not give you control of dependencies
so... how do we totally control for regression testing?

consider looking at stratopan.com and Pinto
...and Nigel's tests

or: Docker.  Mount a set of depencies which all get deleted when
virtual machine closes, unless you specifically ask for them to remain

Slaven rezik ... has been trying to work on external/system
dependencies: cpan-sysdeps -- mapping to cpan modules, packages,
system packages probably something we want to use, to ensure that we
can indeed test a module



in valid.v3.json

...summary/{dist}/{version} ...
[add:]
{ "name": "grade",
  "in": "query"
  "description": "Filter results by grade",
  "type": "string",
  "enum": ["pass",.....


and then CPAN/TEsters/API/Controller/Summary.pm

in sub summary ($c) { ... } we add the validation->param(...)


and in t/controller/summary.t   ... add tests


2018-01-24

To enqueue a job with Held status, e.g., the Reports --

  - enqueue a job in an alternate queue ('hold' queue)
  - make the target job a child of that held job (set parent to other job's id)
  



================

We can retrieve the entire list of test results from, e.g.,

http://www.cpantesters.org/static/distro/M/Mojolicious.js

---begin---
use Mojo::JSON;
use Mojo::UserAgent;
$u = Mojo::UserAgent->new->get('http://www.cpantesters.org/static/distro/M/Mojolicious.json');
$j = Mojo::JSON::decode_json($u->res->body);

use POSIX;
($osname, $hostname, $kernel_version) = (POSIX::uname())[0..2]; 
$match_osvers = ($kernel_version =~ /^(\d+\.\d+)/, $1);

@matching_tests = 
grep { $_->{version} eq '7.60' &&            # Module version
     $_->{platform} eq $Config{archname} &&  # Matching our architecture, O.S., OS version (roughly),
     fc($_->{osname}) eq fc($Config{osname}) &&
     $match_osvers eq ($_->{osvers} =~ /^(\d+\.\d+)/, $1) &&
     $_->{perl} eq $Config{version}          # and Perl version
  } @{$j};

---end---

and in sqlite:

select distinct(distribution) from releases,tests where releases.id=tests.release_id order by distribution;
filename will be as:

   sqlite> select distinct(substr(distribution,1,1)||'/'||replace(distribution,'::','-')) from releases;

prepended with 'http://www.cpantesters.org/static/distro/' and appended with '.json'

Get the file as above, check for matching tests

Match each entry in the json where $_->{distversion} is e.g.,
'JMAP-Tester-0.016' against our database's releases.name column


NOTE: need to keep a list for each module name, of the module_ids and
matching test_ids

TODO BILL:

$tests { module_name } { version } { osname } { osversion } { arch } [ { guid, local_flag, grade } ]

==========

releases within last 2 days --? izzit true?

curl -XPOST 'https://fastapi.metacpan.org/v1/file' -d "$(curl -Ls gist.github.com/metacpan-user/5705999/raw/body.json)"

with:

---begin---
{
  "query": {
    "match_all": {}
  },
  "filter": {
    "and": [
      {
        "term": {
          "path": "cpanfile"
        }
      },
      {
        "term": {
          "status": "latest"
        }
      },
      {
        "range" : {
            "date" : {
                "gte" : "now-2d/d",
                "lt" :  "now/d"
            }
        }        
      }    
    ]
  },
  "fields": [
    "release", "date"
  ],
  "size": 200
}
---end---

or:

---begin---
{ "query": { "match_all": {} }, "filter": { "and": [ { "term": { "path": "cpanfile" } }, { "term": { "status": "latest" } }, { "or": [ {"term" : { "author" : "PREACTION" } }, {"term" : { "author" : "JBERGER" }} ] } ] }, "fields": [ "release", "date", "author" ], "size": 200 }
---end---

                                                                                 
{ 'size' => 200,
  'fields' => ['release', 'date', 'author', 'download_url', 'version'],
  'filter' => {'and' => [ {'term' => {'path' => 'cpanfile'}},
                          {'term' => {'status' => 'latest'}},
                          {'or' => [{'term' => {'author' => 'PREACTION'}},
                                      {'term' => {'author' => 'JBERGER'}}]}
                         ]},
  'query' => {'match_all' => {}}
}

