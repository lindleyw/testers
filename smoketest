#!/usr/bin/env perl

use Mojolicious::Lite;

use Mojo::Util qw(getopt);
use Mojo::URL;
use Mojo::File;
use Mojo::UserAgent;
use Mojo::DOM;
use List::Util qw(pairs);
use v5.22;
use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/lib/";

use Tester::Smoker;

our $VERSION='0.01';

################################################################

# Can be called as, e.g.,
#   $ perl smoketest update
# to update from the metaCPAN API.

# ./smoketest release --author PREACTION --count 5 \
#   --start_date=2012-07-01 --end_date=2012-12-30

################################################################
################################################################
################################################################

plugin 'Config';

push @{app->commands->namespaces}, 'Smoketest::Command';

app->secrets(app->config->{secrets} // ['Get your fresh smoked red-hot modules here!']);

helper smoker => sub {
    my ($self) = @_;

    state $smoker = Tester::Smoker->new(database => $self->config->{dbname},
                                        config   => $self->config,
                                        log      => $self->app->log,
                                        app => $self->app,
                                       );

    foreach my $conf_val (qw(perlbrew cpanm_test local_lib timeout)) {
        $smoker->tester->$conf_val($self->config->{smoker}->{$conf_val})
          if defined $self->config->{smoker}->{$conf_val};
    }

    return $smoker;
};

helper sql => sub {
    my ($self) = @_;
    state $sql = $self->smoker->sql;
};

helper db => sub {
    my ($self) = @_;
    state $db = $self->sql->db;
};

plugin Minion => {SQLite => 'sqlite:'. app->config->{dbname}};
plugin 'Minion::Admin';

plugin 'Yancy' => {
                   backend => 'sqlite:'. app->config->{dbname},
                   collections => {
                                   minion_jobs => { type => 'object',
                                                    'x-list-columns' => [ qw(id queue state priority created) ],
                                                    properties => { id => { type => 'integer',
                                                                            readOnly => 1,
                                                                          },
                                                                    created => { type => 'string',
                                                                                 format => 'date-time',
                                                                                 readOnly => 1,
                                                                               },
                                                                    finished => { type => ['string','null'],
                                                                                  format => 'date-time',
                                                                                  readOnly => 1,
                                                                                },
                                                                    args => { type => ['string','null'], # NOTE: JSON
                                                                            },
                                                                    priority => { type => 'integer',
                                                                                },
                                                                    attempts => { type => 'integer',
                                                                                  readOnly => 1,
                                                                                },
                                                                    queue => { type => 'string',
                                                                             },
                                                                    result => { type => ['string','null'],
                                                                              },
                                                                    retried => { type => ['string','null'],
                                                                               },
                                                                    started => { type => ['string','null'],
                                                                                 readOnly => 1,
                                                                               },
                                                                    state => { enum => [qw(inactive active failed finished)],
                                                                               type => ['string','null'],
                                                                             },
                                                                  }
                                                  },
                                   releases => { type => 'object',
                                                 'x-list-columns' => [ qw(id name version author released) ],
                                                 properties => { id => { type => 'integer',
                                                                         readOnly => 1,
                                                                       },
                                                                 name => { type => 'string',
                                                                           description => 'Name of the CPAN module',
                                                                           readOnly => 1,
                                                                         },
                                                                 version => { type => ['string', 'null'],
                                                                              description => 'Version of the module',
                                                                              readOnly => 1,
                                                                            },
                                                                 released => { type => ['string', 'null'],
                                                                               format => 'date-time',
                                                                               description => 'Release date on CPAN',
                                                                               readOnly => 1,
                                                                             },
                                                                 author => { type => 'string',
                                                                             description => 'CPAN author',
                                                                             readOnly => 1,
                                                                           },
                                                                 download_url => { type => ['string', 'null'],
                                                                                   description => 'Location to download the module release',
                                                                                   readOnly => 1,
                                                                                 },
                                                                 added => { type => 'string',
                                                                            format => 'date-time',
                                                                            description => 'When we first saw this module release',
                                                                            readOnly => 1,
                                                                         },
                                                               }
                                               },
                                   environments => { type => 'object',
                                                     'x-list-columns' => [qw(id perlbrew perl osname osvers archname added)],
                                                     properties => { id => { type => 'integer',
                                                                             readOnly => 1,
                                                                           },
                                                                     host => { type => ['string','null'],
                                                                               description => 'Hostname',
                                                                               readOnly => 1,
                                                                             },
                                                                     perlbrew => {type => ['string','null'],
                                                                                  description => 'Version name (if any) passed to Perlbrew',
                                                                                  readOnly => 1,
                                                                                 },
                                                                     platform => { type => ['string','null'],
                                                                                   description => 'Platform',
                                                                                   readOnly => 1,
                                                                                 },
                                                                     perl => { type => ['string','null'],
                                                                               description => 'Perl version from $Config{version}',
                                                                               readOnly => 1,
                                                                             },
                                                                     osname => { type => ['string','null'],
                                                                                 description => 'from $Config{osname}',
                                                                                 readOnly => 1,
                                                                               },
                                                                     osvers => { type => ['string','null'],
                                                                                 description => 'from $Config{osvers}',
                                                                                 readOnly => 1,
                                                                               },
                                                                     archname => { type => ['string','null'],
                                                                                   description => 'from $Config{archname}',
                                                                                   readOnly => 1,
                                                                                 },
                                                                     added => { type => ['string', 'null'],
                                                                                format => 'date-time',
                                                                                description => 'Timestamp when added',
                                                                                readOnly => 1,
                                                                              }
                                                                   },
                                                   },
                                   tests => { type => 'object',
                                              'x-list-columns' => [qw(id release_id start_time elapsed_time grade)],
                                              properties => { id => { type => 'integer',
                                                                      readOnly => 1,
                                                                    },
                                                              release_id => { type => 'integer',
                                                                              readOnly => 1,
                                                                              description => 'ID of release UUT [unit under test]',
                                                                            },
                                                              environment_id => { type => 'integer',
                                                                                  readOnly => 1,
                                                                                  description => 'Test environment (Perl version, OS, etc)',
                                                                                },
                                                              start_time => { type => ['integer', 'null'],
                                                                              # format => 'date-time',
                                                                              description => 'Timestamp when test began',
                                                                              readOnly => 1,
                                                                            },
                                                              elapsed_time => { type => 'number',
                                                                                readOnly => 1,
                                                                                description => 'Elapsed test time',
                                                                              },
                                                              build_log => { type => ['string','null'],
                                                                             format => 'textarea',
                                                                             description => 'Complete build log',
                                                                             readOnly => 1,
                                                                           },
                                                              report => { type => ['string','null'],
                                                                          format => 'textarea',
                                                                          description => 'Complete report log',
                                                                          readOnly => 1,
                                                                        },
                                                              grade => { type => ['string','null'],
                                                                             description => 'Grade from cpanreporter',
                                                                             readOnly => 1,
                                                                           },
                                                              test_command => { type => ['string','null'],
                                                                                description => 'Command-line used when running test',
                                                                                readOnly => 1,
                                                                              },
                                                              test_error => { type => ['string','null'],
                                                                              format => 'textarea',
                                                                              description => 'STDERR from test execution',
                                                                              readOnly => 1,
                                                                            },
                                                              reporter_command => { type => ['string','null'],
                                                                                    description => 'Command-line used when running reporter',
                                                                                    readOnly => 1,
                                                                                  },
                                                              reporter_error => { type => ['string','null'],
                                                                                  description => 'STDERR from reporter execution',
                                                                                  readOnly => 1,
                                                                                },
                                                              report_sent => { type => ['string', 'null'],
                                                                               format => 'date-time',
                                                                               description => 'Time report was transmitted',
                                                                               readOnly => 1,
                                                                             },
                                                            },
                                            },
                                  },
                  };

################################################################

get '/' => 'index';

################################################################

get '/releases' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT COUNT(*) AS count FROM releases')->hashes->first; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Database not configured or not populated'});
    }
};

get '/release/#release' => sub {   # octothorpe placeholder because releases contain '.'
    my $self = shift;

    # /release/Mojolicious-7.58
    my $result = eval { $self->db->query('SELECT * FROM releases WHERE name=?',
                                         $self->stash('release'))->hashes->first; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Release not found'});
    }
};

get '/distribution/:dist' => sub {
    my $self = shift;

    # /distribution/Mojolicious
    my $result = eval { $self->db->query('SELECT * FROM releases WHERE distribution=?',
                                         $self->stash('dist'))->hashes; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Distribution not found'});
    }
};

get '/author/:auth' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT * FROM releases WHERE author=?',
                                         $self->stash('auth'))->hashes; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Distribution not found'});
    }
};

################

get '/report/:id' => sub {
    my $self = shift;

    my $test = $self->smoker->report_for($self->stash('id'));
    unless (defined $test) {
        $self->render(json => {error => 'Report not found'});
        return undef;
    }
    $self->render(json => $self->smoker->testersdb->report_json($test));
};

app->minion->add_task ( report => sub { my ($job, @args) = @_;

                                        # TODO: If queue is 'deferred': ...?

                                        my $test_release_id = $args[0]->{test_id};
                                        my $test = $job->app->smoker->report_for($test_release_id)
                                          if defined $test_release_id;
                                        my $test_json = $job->app->smoker->testersdb->report_json($test)
                                          if defined $test;
                                        my $result = $job->app->smoker->testersdb->submit_report($test_json)
                                          if defined $test_json;

                                        if (defined $result) {
                                            $job->finish($result);
                                        } else {
                                            $job->fail({error => 'Failed to submit report', %{$result} // " test_id=$test_release_id"})
                                        }
                                    }
                      );

################

app->minion->add_task( test => sub { my ($job, @args) = @_;
                                     my ($result, @result_args) = $job->app->smoker->test($job, @args);
                                     if ($result eq 'success') {
                                         $job->finished(@result_args);
                                     } elsif ($result eq 'error') {
                                         $job->fail(@result_args);
                                     } else {
                                         # TODO: Better define why/when this can happen
                                         # $job->retry(@result_args);
                                     }
                                 } );

get '/tests' => sub {
    my $self = shift;

    my $result = $self->smoker->get_all_tests();

    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Tests not found'});
    }
};

get '/tests/#release' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT * FROM tests WHERE release_id in (SELECT id FROM releases WHERE name=?)',
                                         $self->stash('release'))->hashes; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'No tests have been run, or Distribution not found'});
    }
};

get '/test/:id' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT * FROM tests WHERE id=?',
                                         $self->stash('id'))->hashes; };
    if (defined $result) {
        $self->respond_to(json => {json => $result},
                          html => {text => '<pre>'.eval{$result->[0]->{build_log}}.'</pre>'},
                          any => {text => eval{$result->[0]->{build_log}}});
    } else {
        $self->render(json => {error => 'Test not found'});
    }
};

get '/tests/distribution/:name' => sub {
    my $self = shift;
    my $reports = $self->app->smoker->reports_for_name($self->stash('name'));
    my $result;
    if (defined $reports && scalar @{$reports}) {
        $result = [ map {
            my $info = $self->app->smoker->get_release_info({id => $_->{release_id}});
            if (!defined $info || !$info->size) {
                ()
            } else {
                { id => $_->{id},
                  $info->first->%{qw/name version released/},
                  perl_version => $_->{notes}->{perl_version} // '',
                  elapsed_time => $_->{elapsed_time},
                  grade => eval{$_->{grade}} // '(unknown)',
                  report_sent => $_->{report_sent},
              }
            }
        } @{$reports} ];
    }
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'No tests have been run, or Distribution not found'});
    }
};

###

app->minion->add_task ( update => sub { my ($job, @args) = @_;
                                                my $results = $job->app->smoker->get_recent(@args);
                                                if (defined $results) {
                                                    $job->finished();
                                                } else {
                                                    $job->fail('Could not download updates list')
                                                }
                                            }
                              );

get '/update' => sub {
    my ($self) = @_;
    my $id = $self->minion->enqueue('update', {priority => 0});
    $self->render(json => {job => {task => 'update', id => $id}});
};

get '/update/*uri' => sub {
    my ($self) = @_;
    my $id = $self->minion->enqueue('update' => [$self->stash('uri')], {priority => 0});
    $self->render(json => {job => {task => 'update', id => $id}});
};

get '/job/:id' => sub {
    my ($self) = @_;
    my $job = $self->minion->job($self->stash('id'));
    $self->render(json => $job->info);
};

del '/job/:id' => sub {
    my ($self) = @_;
    my $deleted = $self->minion->job($self->stash('id'))->remove;
    $self->render(json => {success => $deleted});
};

get '/jobs/stats' => sub {   # Minion Admin API
    my ($self) = @_;
    my $stats = $self->minion->stats;
    $self->render(json => $stats);
};

################################################################

app->start;

__DATA__

@@ index.html.ep
<!DOCTYPE html>
<html>
<head>
<title>Perl Smoker</title>
</head>
<body>
<ul>
<li><a href="/tests">JSON structure of all completed tests</a></li>
<li><a href="/yancy">Yancy API panel</a> (Requires JavaScript enabled)</li>
<li><a href="/minion">Minion control panel</a> (Requires JavaScript enabled)</li>
</ul>

</body>
</html>

