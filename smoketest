#!/usr/bin/env perl

use Mojolicious::Lite;

use Mojo::Util qw(getopt);
use Mojo::URL;
use Mojo::File;
use Mojo::UserAgent;
use Mojo::DOM;
use List::Util qw(pairs);
use v5.22;
use strict;
use warnings;

################################################################

# Can be called as, e.g.,
#   $ perl smoketest update ~/Documents/02packages.details.txt -m rebuild
# to rebuild and reload database from a local file, or:
#   $ perl smoketest update
# to update from the default CPAN location (remote URL)

# ./smoketest module --author PREACTION --count 5 --start_date=2012-07-01 --end_date=2012-12-30 -v -f

sub enable_recent {
    # Get the list of most recently updated modules from source; default to
    # http://cpan.cpantesters.org/modules/01modules.mtime.html
    my ($self, $info, $source) = @_;

    my $source_url = Mojo::URL->new($source // $self->app->config->{cpan_testers} );
    push @{$source_url->path->parts},
         'modules',
         $self->app->config->{cpan_recent} // '01modules.mtime.html';

    my $ua = Mojo::UserAgent->new();
    my $module_dom = $ua->get($source_url)->result->dom;

    # Create a list of modules
    my $modules = _dom_extract($module_dom->find('a[href$=".tar.gz"]'));

    $modules->each(sub { $self->app->db
                         ->query('INSERT OR REPLACE INTO modules(name, version, released, author, relative_url) '.
                                 'VALUES (?,?,?,?,?)',
                                 $_->{name}, $_->{version}, $_->{released}, $_->{author}, $_->{relative_url});
                     });

    # Convert list to a regex which selects exactly those modules
    my $regex = "^(?x:\n.^  # never matches, only purpose is to let things align nicely\n" .
      '    # Recent modules list from ' . $source_url . "\n    |".
      $modules->map( sub { $_->{name} . '  # Version ' . $_->{version} . '  ' . $_->{released} })->join("\n   |")     
      . "\n)";
    # Save regex in module_flags table
    my $saved = $self->app->db->query('INSERT OR REPLACE INTO module_flags (priority, origin, author, disable, regex) '.
                                      'VALUES (?,?,?,?,?)',
                                      $info->{priority}, $info->{reason}, $info->{author}, $info->{disabled} // 0, $regex
                                     );
    return 1;
}

################################################################

# Find CPAN in the list of modules (it's currently under ANDK's directory)
# Get the current revision's list of disabled modules and use that to refresh the disabled list

# When relative_url is 'A/AN/ANDK/CPAN-2.16.tar.gz' name is CPAN, version is 2.16 --
# Fetch https://st.aticpan.org/source/ANDK/CPAN-2.16/distroprefs/01.DISABLED.yml

package cpan_wrapper {
    use CPAN;           # Must be inside a module, not the main program, because we don't want to *run* cpan!
    sub version {
        return $CPAN::VERSION;
    }
};

sub _pick {
     # Similar to the hash slice, » $hash->%{@elements} «
     # but only picks defined entries.
     my ($hash, @elements) = @_;
     return map { exists $hash->{$_} ? ( $_, $hash->{$_} ) : () } @elements;
}

sub _add_test {
    # Run a test on a given module, with a given module version,
    # on a given version of Perl
    my ($self, $mod_info) = @_;
    
    my $module_id = $mod_info->{module_id} // eval {
         # Because of the index `module_idx`, choosing the most-recent
         # module by name will always give us the latest version
         $self->app->db->select( -from => 'modules',
                                 -columns => ['id'],
                                 -where => { _pick ( $mod_info,
                                                     qw(name version) ) },
                                 -order_by => ['-added'],
                                 -limit => 1 )->hash->{id};
    };
    $self->app->minion->enqueue('test', { module_id => $module_id,
                                          env_id => $mod_info->{environment_id}
                                        });
}

sub _find_recent {
    my ($self, $mod_info) = @_;

    # example of passing more complex queries to _find_recent:
    #   _find_recent($self,{author =>'ANDK', name => {'LIKE', 'CPAN%'}})
    #   _find_recent($self,{added => {'>',\["datetime('now', ?)", '-21 day']}})

    my $modules =
         $self->app->db->select( -from => 'modules',
                                 # grouping by name after selecting max(added)
                                 # guarantees we get the most-recently-added version
                                 # for each module name
                                 -columns => ['id', 'name', 'max(added) as added'],
                                 -where => { _pick ( $mod_info,
                                                     qw(name version author added) ),
                                             disabled_by => undef, # not disabled
                                           },
                                 -group_by => ['name'],
                                 -order_by => ['-added'],  # most-recent first
                               );
    return $modules->hashes;      # as a Mojo::Collection
}

# TODO: api for selecting the number of modules added on a given date
# sqlite> select date(added), count(added) from modules group by date(added);

################################################################
################################################################
################################################################

package Tester::Smoker {

    use Mojo::Base -base;
    use Mojo::File;

    use Mojo::SQLite;

    use SQL::Abstract::More;

    has 'database';
    has 'rebuild';     # Flag to rebuild database.  Useful for debugging or reprovisioning
    has 'sql' => sub { # Set during instantiation; or, create object
        my ($self) = @_;
        if (defined $self->database) {
            Mojo::SQLite->new('sqlite:' . $self->database);
        }
    };
    has 'config';
    has 'minion';

    sub new {
        my $class = shift;
        my $self = $class->SUPER::new(@_);

        $self->sql->abstract(SQL::Abstract::More->new());

        $self->sql->migrations->name('smoker_migrations')->from_data('main', 'sqlite_migrations');

        $self->sql->migrations->tap(sub { $self->rebuild and $_->migrate(0) })->migrate;
        my $jmode = $self->sql->db->query('PRAGMA journal_mode=WAL;');
        if ($jmode->arrays->[0]->[0] ne 'wal') {
            warn 'Note: Write-ahead mode not enabled';
        }
        
        return $self;
    }

    use YAML;

    sub save_module_info {
        my ($self, $fields) = @_;
        my $id = eval {
                $self->sql->db->query('INSERT INTO modules(name, version, released, author, relative_url) '.
                                      'VALUES (?,?,?,?,?)',
                                      $fields->{main_module},
                                      @{$fields}{qw(version date author download_url)})
                ->last_insert_id;
            };
        return $id;
    }

    sub update_module {
        my ($self, $module_name) = @_;

        my $ua = Mojo::UserAgent->new();
        my $source_url = Mojo::URL->new($self->config->{metacpan_release}); # API endpoint
        push @{$source_url->path->parts}, 'CPAN';
        my $result = $ua->get($source_url);
        if ($result->res->{code} == 200) {
            my $module_fields = $result->res->json;
            $self->save_module_info($module_fields);  # ignores return id value
            return $module_fields;
        }
        return undef;
    }

    sub save_regex {
        my ($self, $source) = @_;

        # Save to the database, a local or remote copy of a regex
        # which will be applied against the list of modules, and which
        # will disable (or enable) them.

        # If no source specified, load default remote file
        my $source_url = Mojo::URL->new($source // $self->config->{cpan_source});
        my $disabled_list;
        my ($priority, $author, $version, $reason);

        if ($source_url->protocol || $source_url->host) {
            # Remote file

            # Retrieve https://fastapi.metacpan.org/v1/release/CPAN and look at {version}
            # or, preferably, update the database with that
            my $module = $self->update_module('CPAN');

            ($author, $version) = @{$module}{qw(author version)};

            if ($version ne cpan_wrapper::version()) {
                warn "Our cpan=$CPAN::VERSION but remote is $version";
            }

            unless ($source_url->path  =~ /\.\w+/) { # If just a path, without a filename+extension: use default
                push @{$source_url->path->parts}, ( $author,
                                                    'CPAN-' . $version,
                                                    'distroprefs',
                                                    $self->config->{cpan_disable} //
                                                    '01.DISABLED.yml'
                                                  );
                $source_url->path->trailing_slash(0);
            }
            $reason = "${author}/CPAN-${version}";
            my $ua = Mojo::UserAgent->new();
            $disabled_list = $ua->get($source_url)->result;
            die "Can't download disabled list: ".$disabled_list->message
                unless $disabled_list->is_success;
            $disabled_list = $disabled_list->body;
            $priority = 100;    # Default for remote file
        } else {
            # Local file
            $reason = $source;
            $priority = 50;     # Default for local
            $disabled_list = Mojo::File->new( $source)->slurp;
            die "No module list file" unless length($disabled_list);
        }

        my $matchfile = YAML::Load($disabled_list);
        
        # save as meta-information in the Modules list
        my $saved = $self->sql->db->query('INSERT OR REPLACE INTO module_flags (priority, origin, author, disable, regex) '.
                                          'VALUES (?,?,?,?,?)',
                                          $priority, $reason, $author, $matchfile->{disabled}, $matchfile->{match}{distribution}
                                         );
        
        1;
    }

    sub _text_extract {
        my ($module_text) = @_;
        
        my $vals = {};          # populate with a hash slice:
        @{$vals}{qw(name version relative_url)} = split /\s+/, $module_text;
        $vals->{author} = ($vals->{relative_url} =~ m{^./../(\w+)/})[0];
        $vals->{version} = undef if ($vals->{version} eq 'undef'); # Replace text 'undef'
        return $vals;
    }

    # use Date::Parse;
    my %months = (jan=>1,feb=>2,mar=>3,apr=>4,may=>5,jun=>6,jul=>7,aug=>8,sep=>9,oct=>10,nov=>11,dec=>12);

    sub _dom_extract {
        my $module_tgzs = shift;

        my @modules;
        $module_tgzs->each( sub {
                                my $module_node = shift;
                                my $module_info = {};
                                @{$module_info}{qw(author name version)} = ( $module_node->attr('href') =~ # from the URL,
                                                                             m{(\w+)/([^/]+?)-?v?([0-9a-z.]+)?\.tar\.gz}
                                                                           ); # Extract into hash slice
                                $module_info->{name} =~ s/-/::/g;

                                # Extract content and remove any leading whitespace
                                my $module_info_text = $module_node->next_node->content =~ s/\A\s+//r =~ s/\s+\z//r;
                                ($module_info->{size}, my $m_day, my $m_mon, my $m_year) = split(/\s+/, $module_info_text, 4);
                                # Convert human units to octets:
                                $module_info->{size} =~ s/^([0-9.])+([kM])/$1*({k=>1024,M=>1024*1024}->{$2})/e;
                                # use Date::Parse and do str2time() of
                                # date for epoch timestamp, or simply
                                # put into format SQLite understands:
                                $module_info->{released} = sprintf('%4d-%02d-%02d', $m_year, $months{lc($m_mon)}, $m_day);
                                push @modules, $module_info;
                            } );
        return Mojo::Collection->new(@modules);
    }

    sub update {
        my ($self, $source) = @_;

        my $module_list;
        my $module_dom;

        # If no source specified, load default remote module list
        my $source_url = Mojo::URL->new($source // $self->config->{cpan_testers});

        if ($source_url->protocol || $source_url->host) { # Remote file
            unless (length($source_url->path) > 1) { # no path, or '/'
                push @{$source_url->path->parts}, ( 'modules',
                                                    $self->config->{cpan_modules} //
                                                    '02packages.details.txt'
                                                  );
            }
            my $ua = Mojo::UserAgent->new();
            $module_list = $ua->get($source_url)->result;
            die "Can't download modules list: ".$module_list->message
                unless $module_list->is_success;
            if ($source_url->path =~ /\.htm/) {
                $module_dom = $module_list->dom;
            } else {
                $module_list = $module_list->body; # plaintext contents
            }
        } else {                # Local file
            $module_list = Mojo::File->new( $source)->slurp;
            die "No module list file" unless length($module_list);
            $module_dom = Mojo::DOM->new($module_list) if ($module_list =~ /<html/i);
        }

        my $module_tgzs;
        if (defined $module_dom) {
            $module_tgzs = _dom_extract($module_dom->find('a[href$=".tar.gz"]'));
        } else {
            # Extract from text file, skipping header, with header/body as SMTP message
            my $header = 1;
            $module_tgzs = Mojo::Collection->new (
                                                  map {
                                                      if ($header) {
                                                          $header = $_ !~ /^$/; # false once we reach blank line
                                                          (); # and skip this
                                                      } else {
                                                          _text_extract($_);
                                                      }
                                                  } ( split (/\n/, $module_list ) )
                                                 );
        }
        $module_tgzs->each(sub { $self->sql->db
                                     ->query('INSERT OR REPLACE INTO modules(name, version, released, author, relative_url) '.
                                             'VALUES (?,?,?,?,?)',
                                             $_->{name}, $_->{version}, $_->{released}, $_->{author}, $_->{relative_url});
                             });
        return $module_tgzs->size;
    }

    ################################################################

    sub _apply_regexes {
        my ($self, $module_id) = @_; 

        # For each available enable/disable list, prepare to apply in priority order
        my $regex_list = $self->app->db->query('SELECT * FROM module_flags ORDER BY priority DESC, added DESC');
        return undef unless defined $regex_list;

        my $module_info = $self->app->db->query('SELECT * FROM modules WHERE id=?', $module_id);
        my $disabled = 0;
        my $disabled_by;
        $regex_list->hashes->each( sub {
                            if ( $module_info->{name} =~ $_->{regex} ) {
                                $disabled = $_->{disable};
                                $disabled_by = $disabled ? $_->{id} : undef;
                            }
                        } );
        $self->app->db->query('UPDATE modules SET disabled_by = ? WHERE id = ?',
                             $disabled_by, $module_info->{id});
        return $disabled;
    }

    ################################################################

    sub test {
        my $self = shift;
        my $args = {@_};

        my $module_id = $args->{module_id};
        # cpanm --test-only ((FULL_URL))
        # ; $DB::single = 1;
        print "(test $module_id)";

        my $results = $self->sql->db->query('SELECT name, version, relative_url FROM modules WHERE id=?', $module_id)
        ->hashes;
        $results = $results->first if defined $results;
        print "(($results->{name})) (($results->{version}))\n";
        # Check against 'disabled' regex; if matches, fail with error.
        if ($self->_apply_regexes($results->{id})) {  # module is disabled
            # fail with error
        } else {
            # actually test the module
            # ...save result
        }
    }

    ################################################################

    sub apply {
        my ($self, $recipe_name) = @_;

        my @recipe_steps = eval { @{$self->config->{apply}->
                                    {$recipe_name // 'recent'} }
                              };

        # TODO: How do we choose the Perl version?

        foreach my $step (pairs( @recipe_steps)) {
            my ( $action, $args ) = @$step;
            if ($self->can($action)) {
                # Array refs [] get expanded to ordinary argument list; else verbatim
                # $module_group->$action(ref $args eq 'ARRAY' ? @{$args} : $args);
                # TODO: Need to handle errors and bail out
            }
        }
        # use $module_group->selected() ...?
    }


    ################
    
    sub _item_list {
        # Returns empty list (which gets skipped in building list later) if no author, -or-
        # {'term' => {'author' => 'JBERGER'}},  # single author passed
        # {'or' => [{'term' => {'author' => 'PREACTION'}},
        #           {'term' => {'author' => 'JBERGER'}}]}  # 'PREACTION,JBERGER' passed-in
        #
        my $option = shift;
        my @item_list;
        while (defined (my $item = shift)) {
            if (ref $item) {
                push @item_list, map { split /,/ } @{$item};
                next;
            }
            push @item_list, split (',', $item) if defined $item;
        }
        # XXX: Probably eliminate the special-case of ref and move that logic into _versions() below
        if (ref $option) { # Listref: [term, value to return if item is empty]
            if (!scalar @item_list) {
                return ${$option}[1];
            }
            $option = ${$option}[0];
        }
        return () unless scalar @item_list;
        return { term => { $option => $item_list[0] }} if (scalar @item_list == 1);
        return { term => { or => [ map { { term => { $option => $_ }} } @item_list ] } };
    }

    sub _date_range {
        my ($start, $end) = @_;
        if (defined $start && defined $end) {
            return ( range => { date => { gte => $start, lte => $end } } );
        }
        return ('match_all' => {});   # populate 'query' with this
    }

    sub _versions {
        my ($versions, $modules, $count) = @_;
        # TODO:
        # Return appropriate for these use cases
        # - get the one latest version (status=latest) of each of several modules
        # - get last 'n' versions of one module (use 'count')
        # - get specific versions of one module
        # ... _item_list(['version', {term => {'status' => 'latest'}}], $self->{versions}) ...

        # XXX: this won't work, because _item_list does more than just separate out comma-delimited lists
        my @selected_versions = _item_list($versions);
        return @selected_versions if scalar @selected_versions;
        # ...
    }

    sub test_metacpan {
        my ($self, @args) = @_;
        # See also: https://github.com/metacpan/metacpan-api/blob/master/docs/API-docs.md

        my $req = { 'size' => $self->{count} // 10,
                    'fields' => [qw(name version date provides author download_url main_module)],
                    'filter' => {'and' => [_item_list('main_module', $self->{modules}),
                                           _item_list('author', $self->{authors}),
                                           # TODO: Change this to _versions() above???
                                           _item_list(['version', {term => {'status' => 'latest'}}], $self->{versions}),
                                          ]},
                    'query' => {
                                _date_range( $self->{start_date}, $self->{end_date} ) },
                    'sort' => {'date' => 'desc'},
                  };

        my $ua = Mojo::UserAgent->new();
        my $source_url = $self->config->{metacpan_release}; # API endpoint
        my $modules = $ua->post($source_url => json => $req)->result;
        my $module_list = defined ($modules) ? Mojo::JSON::decode_json($modules->body) : {};
        my $hits = $module_list->{hits}->{hits};

        foreach my $module (@{$hits}) {
            # NOTE: There is a list of provided (sub)modules, in: $module->{fields}->{provides};
            my $id = eval {
                $self->sql->db->query('INSERT INTO modules(name, version, released, author, relative_url) '.
                                      'VALUES (?,?,?,?,?)',
                                      $module->{fields}->{main_module},
                                      @{$module->{fields}}{qw(version date author download_url)})
                ->last_insert_id;
            };
            print 'Adding ' . $module->{fields}->{main_module} . " = $id\n"
            if (defined $id && $self->{verbose});
            # For now, save full URL instead of relative.  Could do something like:
            # my $relative_url = Mojo::URL->new($module->{fields}->{download_url})->path;

            # Newly-seen modules are always tested. Can also force testing of old ones.
            if (!defined $id && $self->{force_test}) {
                $id = eval {
                    $self->sql->db->query('SELECT id FROM modules WHERE name=? AND version=?',
                                          $module->{fields}->{main_module},
                                          $module->{fields}->{version}
                                         )->hash->{id};
                };
                print 'Queue test for ' . $module->{fields}->{main_module} .' v' . $module->{fields}->{version}
                . " = $id (--force in effect)\n"
                if defined $id && $self->{verbose};
            }
            if (defined $id) {
                # enqueue Minion testing job
                # TODO: append Perl version for use with Perlbrew
                $self->minion->enqueue(test => [module_id => $id]);
            }
        }
    }


    sub cpan_recent {
        my ($self, @args) = @_;
    }

    sub yaml_regex {
        my ($self, @args) = @_;
    }

    sub released {
        my ($self, @args) = @_;
    }

    sub tested {
        my ($self, @args) = @_;
    }


};

################################################################
################################################################
################################################################

package main::Command::update {
    use Mojo::Base 'Mojolicious::Command';

    sub run {
        my ($self, @args) = @_;

        return $self->app->smoker->update(@args);
    }
};

################################################################

package main::Command::regex {
    use Mojo::Base 'Mojolicious::Command';

    sub run {
        my ($self, @args) = @_;

        return $self->app->smoker->save_regex(@args);
    }

};

################################################################

package main::Command::enable_recent {
    use Mojo::Base 'Mojolicious::Command';

    sub run {
        my ($self, @args) = @_;

        return $self->app->smoker->enable_recent(@args);
    }
};

################################################################

package main::Command::module {
    use Mojo::Base 'Mojolicious::Command';

    sub run {
        my ($self, @args) = @_;

        return $self->app->smoker->test_metacpan(@args);
    }
};

################################################################

# Apply the enable/disable list(s)
#

package main::Command::apply {
    use Mojo::Base 'Mojolicious::Command';

    sub run {
        my ($self, @args) = @_;

        return $self->app->smoker->apply(@args);
    }
}

################################################################

# Create Test jobs for one module, or for all enabled modules
#

package main::Command::create {
    use Mojo::Base 'Mojolicious::Command';

    sub run {
        my ($self, @selected_modules) = @_;
    }
    
};

################################################################

# Force immediate in-this-thread execution of Minion jobs
# compare:   $ ./smoketest minion worker

package main::Command::do {
    use Mojo::Base 'Mojolicious::Command';

    sub run {
        my ($self) = @_;
        $self->app->minion->perform_jobs();
    }
    
};

################################################################
################################################################
################################################################

push @{app->commands->namespaces}, 'main::Command';

plugin 'Config';

plugin 'Minion' => { SQLite => 'sqlite:'. app->config->{dbname} };

helper smoker => sub {
    my ($self) = @_;

    # XXX: Can't call getopt before minion's option processing, but how do we rebuild?
    getopt
    # 'r|rebuild'   => \my $rebuild,
    'a|author=s'  => \my @authors,
    'module=s'    => \my @modules,
    'r|recent=i'  => \my $freshness,  # in days
    'rev|revision=s' => \my @versions,  # probably should change meaning of 'count'
    'c|count=i'   => \my $count,
    'start|start_date=s', \my $start_date,
    'end|end_date=s', \my $end_date,
    'f|force'     => \my $force_test,
    'v|verbose'   => \my $verbose,
    ;

    state $smoker = Tester::Smoker->new(database => $self->config->{dbname},
                                        minion   => $self->minion,
                                        config   => $self->config,
                                        # rebuild  => $rebuild,
                                        authors  => \@authors,
                                        modules  => \@modules,
                                        versions => \@versions,
                                        recent   => $freshness,
                                        start_date => $start_date,
                                        end_date => $end_date,
                                        count    => $count,
                                        force_test => $force_test,
                                        verbose  => $verbose,
                                       );
};

helper sql => sub {
    my ($self) = @_;
    state $sql = $self->smoker->sql;
};

helper db => sub {
    my ($self) = @_;
    state $db = $self->sql->db;
};

################

app->minion->add_task( test => sub { my ($job, @args) = @_;
                                     $job->app->smoker->test(@args);
                                     # probably call $job->finished($message) or $job->fail($message)
                                   } );

get '/modules' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT COUNT(*) AS count FROM modules')->hashes->first; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Database not configured or not populated'});
    }
};

get '/module/:modname' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT * FROM modules WHERE name=?', $self->stash('modname'))->hashes->first; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Module not found'});
    }
};

get '/tests/:modname' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT * FROM tests WHERE module_id=(SELECT id FROM modules WHERE name=?)',
                                         $self->stash('modname'))->hashes; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'No tests have been run, or Module not found'});
    }
};

app->minion->add_task( update => sub { my ($job, @args) = @_;
                                       $job->app->smoker->update(@args);
                                       # probably call $job->finished($message) or $job->fail($message)
                                   } );

get '/update' => sub {
    my ($self) = @_;
    my $id = $self->app->minion->enqueue('update', {priority => 0});
    $self->render(json => {job => {task => 'update', id => $id}});
};

get '/update/*uri' => sub {
    my ($self) = @_;
    my $id = $self->app->minion->enqueue('update' => [$self->stash('uri')], {priority => 0});
    $self->render(json => {job => {task => 'update', id => $id}});
};

app->minion->add_task( apply => sub { my ($job, @args) = @_;
                                      apply( $job->app, @args);
                                      # probably call $job->finished($message) or $job->fail($message)
                                   } );

get '/apply' => sub {
    my ($self) = @_;
    my $id = $self->app->minion->enqueue('apply', {priority => 0});
    $self->render(json => {job => {task => 'apply', id => $id}});
};

get '/job/:id' => sub {
    my ($self) = @_;
    my $job = $self->app->minion->job($self->stash('id'));
    $self->render(json => $job->info);
};

del '/job/:id' => sub {
    my ($self) = @_;
    my $deleted = $self->app->minion->job($self->stash('id'))->remove;
    $self->render(json => {success => $deleted});
};

get '/jobs/stats' => sub {
    my ($self) = @_;
    my $stats = $self->app->minion->stats;
    $self->render(json => $stats);
};

app->start;

__DATA__

@@sqlite_migrations

-- TABLE: Module
--  ModuleNum		0001				// Unique record number 
--  Author		BLACKJ				// module author
--  OptionalDir						// sometimes there is an extra dir in module path name
--  ModuleName		Acme-BLACKJ-Utils		// module name

-- TABLE: TestStatus
--  ModuleNum		0001				// FOREIGN KEY(Module) References Module(ModuleNum)
--  Error			Module not found|Disk Error...	// Misc. errors
--  BuildLog		Complete|Incomplete|Absent|Null|Pending	// created by cpanm --test-only 

--  BuildLogPath		smoke/.cpanm/perl-5.24.0/work/1234567890.12345/build.log 
--  BuildLogResult	Pass|Fail|Other
--  Revision		0.01				// module revision number
--  DisabledBy		ANDK|None			// ANDK = Testing disabled by this CPAN ID 
--							// [ANDK, BLUEWIND, current tester ID, etc.]
--							// None = Testing is enabled
--  PerlBuild		5.20.3-thread-debug		// module tested under this Perl build revision
--  TestDate		1496440070			// epoch date and time of test
--  TestDuration		83				// in seconds
--  CpanmReport		Complete|Incomplete|Absent	// created by cpanm-remporter
--  CpanmReportPath	smoke/.cpanmreporter/offline/sync/pass.Acme-BLACKJ-Utils_0.01.x86_64-linux-gnu-thread-multi.3.13.0-79-generic.[epoch].rpt]
--  CpanmReportSent	Yes|No|Unknown
--  ScriptName		Smoker.pl			// Perl script carrying out test
--  ScriptRevision	0.30				// test script revision
--  ScriptDate		1496300070			// epoch time of test script revision
--
-- -- -- --

-- 1 down

DROP TABLE IF EXISTS modules;
DROP INDEX IF EXISTS module_idx;
DROP TABLE IF EXISTS module_flags;
DROP INDEX IF EXISTS module_flags_idx;
DROP TABLE IF EXISTS tests;

-- 1 up

CREATE TABLE modules (
                      id INTEGER PRIMARY KEY,
                      name TEXT,
                      version TEXT,
                      released TIMESTAMP,  -- version timestamp
                      author TEXT,
                      relative_url TEXT,
                      disabled_by TEXT,
                      added TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );

CREATE UNIQUE INDEX module_idx ON modules (name, version);

-- For storing the complex regexps that will be applied to module names,
-- thereby determining which modules are enabled and disabled.

CREATE TABLE module_flags (
                           id INTEGER PRIMARY KEY,
                           priority INTEGER, -- lower values take higher precedence
                           disable  INTEGER, -- enable (0) or disable (1) the modules in the regex
                           origin TEXT,  -- URL or filename
                           regex  TEXT,  -- Regular expression to match module names against
                           author TEXT,  -- PAUSE identifier
                           added TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                          );

CREATE UNIQUE INDEX module_flags_idx ON module_flags (origin);

CREATE TABLE environments (
                           id INTEGER PRIMARY KEY,
                           host TEXT,         -- Hostname (preferably full name; 'localhost' is less helpful)
                           -- These (platform, perl, osname, osvers) match fields in Testers Metabase
                           -- See https://github.com/barbie/cpan-testers-data-generator/
                           platform   TEXT,   
                           perl       TEXT,   -- Perl version
                           osname     TEXT,   --
                           osvers     TEXT,   --
                           added TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                           );

CREATE TABLE tests (
                    id INTEGER PRIMARY KEY,
                    module_id INTEGER,        -- UUT [unit under test]
                    version TEXT,             -- Version number as tested
                    error TEXT,               -- Last or most-severe error encountered
                    environment_id INTEGER,   -- replaces perl_build
                    test_started TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- when testing began (was enqueued)
                    test_finished TIMESTAMP,  -- replaces test_duration
                    build_log TEXT,           -- name of the directory containing the resulting build.log
                                              -- which can be used with $ cpanm-reporter --build_dir=
                    build_log_result TEXT,    -- parsed from the build log
                    cpanm_report TEXT,        -- as submitted
                    cpanm_report_sent TIMESTAMP,
                    -- script_name TEXT,
                    -- script_revision TEXT,    -- from CPAN
                    -- script_date TIMESTAMP,   -- from CPAN
                    FOREIGN KEY(module_id) REFERENCES modules(id),
                    FOREIGN KEY(environment_id) REFERENCES environments(id)
);
