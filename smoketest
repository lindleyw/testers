#!/usr/bin/env perl

use Mojolicious::Lite;

use Mojo::Util qw(getopt);
use Mojo::URL;
use Mojo::File;
use Mojo::UserAgent;
use Mojo::DOM;
use List::Util qw(pairs);
use v5.22;
use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/lib/";

use CPAN::Wrapper;
use Tester::Smoker;

################################################################

# Can be called as, e.g.,
#   $ perl smoketest update
# to update from the metaCPAN API.

# ./smoketest release --author PREACTION --count 5 \
#   --start_date=2012-07-01 --end_date=2012-12-30

################################################################

package main::Command::list {
    use Mojo::Base 'Mojolicious::Command';
    use Minion::Backend;

    has 'description' => 'List currently-enqueued tests to be run';

    sub run {
        my ($self, @args) = @_;

        my $jobs = $self->app->minion->backend->list_jobs(0, 50,  # offset, limit
                                                          {state => $args[0] // 'inactive',    # 'finished' or 'failed' are useful
                                                           task => 'test',
                                                          }
                                                         );
        print Mojo::Util::tablify [ [qw/Job Status Distribution Version Author/],
                                    map {
                                        my $release_id = eval{$_->{args}->[0]->{'release_id'}};
                                        if (defined $release_id) {
                                          my $info = $self->app->smoker->get_release_info({id => $release_id}) if defined $release_id;
                                          if (!defined $info) {
                                            ()
                                          } else {
                                            [ $_->{id}, $_->{state},
                                              $info->first->@{qw/name version author/}
                                            ]
                                            }
                                        } else {
                                            ()
                                        }
                                    }
                                    @{$jobs->{jobs}} ];
        return;
    }
};

################################################################

package main::Command::update_perl_versions {
    use Mojo::Base 'Mojolicious::Command';

    has 'description' => 'Updates the list of Perl versions installed via Perlbrew';
    has usage => sub { shift->extract_usage };

=head1 SYNOPSIS

Usage: APPLICATION update_perl_versions [options]

Options:
   -v ver something
=cut

    sub run {
        my ($self, @args) = @_;

        return $self->app->smoker->update_perl_versions(@args);
    }
};

################################################################

package main::Command::regex {
    use Mojo::Base 'Mojolicious::Command';

    has 'description' => 'Retrieves and updates, from metacpan, the cached copy of the regex for disabled modules';
    has usage => sub { shift->extract_usage };

=head1 SYNOPSIS

Usage: APPLICATION regex [options]

Options:
   -s something
=cut

    sub run {
        my ($self, @args) = @_;

        return $self->app->smoker->fetch_and_save_regex(@args);
    }

};

################################################################

package main::Command::reload {
    use Mojo::Base 'Mojolicious::Command';

    has 'description' => 'Reloads the entire list of modules from MetaCPAN';

    sub run {
        my ($self, @args) = @_;
        my $updated_releases = $self->app->smoker->get_all(@args);
        if ($self->app->smoker->check_regex(release_id => $updated_releases)) {
            $self->app->log->info("modules updated OK");
        } else {
            $self->app->log->error("could not update module list");
        }
    }
};

################################################################

package main::Command::update {
    use Mojo::Base 'Mojolicious::Command';
    use Mojo::Util qw(getopt);

    has 'description' => 'Retrieves distribution info from MetaCPAN and enqueues tests';

    sub run {
        my ($self, @args) = @_;
        getopt \@args, [qw(auto_abbrev)],
          'v|verbose' => \my $verbose,   # Note abbrev, versus -version below
          'count=i' => \my $count,
          'force'   => \my $force_test,
          'distribution|distro=s' => \my @dists,
          'version=s' => \my @versions,  # one 'Release' is a 'Distribution-Version' combination,
          'release=s' => \my @releases,  # so generally either specify release or distro(+version).
          'author=s' => \my @authors,
          'perl_version=s' => \my @perl_versions,
          'start_date=s' => \my $start_date,
          'end_date=s'   => \my $end_date;

        # Split/join to also permit comma-delimited
        @perl_versions = split ',', join ',', @perl_versions;
        my $releases =
          $self->app->smoker->get_metacpan( { count => $count,
                                              main_module => [split ',', join ',', @dists],
                                              name => [split ',', join ',', @releases],
                                              version => [split ',', join ',', @versions],
                                              author => [split ',', join ',', @authors],
                                              start_date => $start_date,
                                              end_date => $end_date,
                                            } );

        # use Data::Dumper;
        # print STDERR Dumper($releases);

        # Ensure we know about which Perl versions are installed
        $self->app->smoker->update_perl_versions(@args);

        my @perl_test_versions;
        foreach my $v (@perl_versions) {
            my $vv = $self->app->smoker->get_environment({perl => $v});
            if (defined $vv) {
                push @perl_test_versions, $vv
            } else {
                die "Perl version ($v) not found";
            }
        }
        # Default to current environment
        if (!scalar @perl_test_versions) {
          @perl_test_versions = $self->app->smoker->get_environment({id => $self->app->smoker->my_environment()});
        }
        # Enqueue tests for each of those releases.
        if (defined $releases) {
          $self->app->log->info('Enqueueing ' . $releases->size . ' releases') if $verbose;
          $releases->each(sub {
                            my $id = $_->{id};
                            # TODO:
                            # Get distribution name
                            # unless $force_test --
                            #  - Check against disabled list
                            #  - Check against cpan/cpanm already-tested list
                            #  - Check against *our* already-tested database
                            # Enqueue Minion testing jobs
                            # TODO: Probably move enqueue() calls into Smoker
                            foreach my $v (@perl_test_versions) {
                              # XXX: ?+0 to work around DBD::SQLite issue; c.f.
                              # https://metacpan.org/pod/DBD::SQLite#Add-zero-to-make-it-a-number

                              my $skip = eval{$self->app->sql->db->query(q{SELECT id FROM minion_jobs WHERE }.
                                                                         q{(task='test') AND }.
                                                                         q{json_extract(args,'$[0].release_id')=?+0 }.
                                                                         q{AND json_extract(args,'$[0].environment')=?+0},
                                                                         $id, $v->{id})->hashes->first->{id}};
                              $skip //= eval{$self->app->sql->db->select(-from => 'tests',
                                                                         -where => {release_id => $id,
                                                                                    environment_id => $v})
                                             ->hashes->first->{id}};
                              $skip = " (skipping, already tested)" if defined $skip;
                              $self->app->log->info('  ... ' . $_->{name} . ' (Perl ' . $v->{perl} . ')'. ($skip//''))
                                if $verbose;
                              if (!defined $skip) {
                                  $self->app->minion->enqueue(test => [{release_id => $id, environment => $v->{id}}],
                                                              {notes => {module_info => $_, perl_version => $v->{perl}}});
                              }
                            }
                          });
        }

    }
};

################################################################

# Apply the enable/disable list(s)
#

# package main::Command::apply {
#     use Mojo::Base 'Mojolicious::Command';

#     has 'description' => '';

#     sub run {
#         my ($self, @args) = @_;

#         return $self->app->smoker->apply(@args);
#     }
# }

# ################################################################

# # Create Test jobs for one module, or for all enabled modules
# #

# package main::Command::create {
#     use Mojo::Base 'Mojolicious::Command';

#     has 'description' => '';

#     sub run {
#         my ($self, @selected_modules) = @_;
#     }
    
# };

################################################################

# Force immediate in-this-thread execution of Minion jobs
# compare:   $ ./smoketest minion worker

package main::Command::do {
    use Mojo::Base 'Mojolicious::Command';

    has 'description' => 'Run any enqueued tests immediately, without using Minion workers';

    sub run {
        my ($self) = @_;
        $self->app->minion->perform_jobs();
    }
    
};

################################################################

package main::Command::rebuild {

    use Mojo::Base 'Mojolicious::Command';

    has 'description' => 'Discard the entire testing database and rebuild its structure.';

    sub run {
      my ($self) = @_;

      state $smoker = Tester::Smoker->new(database => $self->app->config->{dbname},
                                          config   => $self->app->config,
                                          log      => $self->app->log,
                                          rebuild  => 1,
                                         );
    }
};

################################################################
################################################################
################################################################

push @{app->commands->namespaces}, 'main::Command';

plugin 'Config';

helper smoker => sub {
    my ($self) = @_;

    state $smoker = Tester::Smoker->new(database => $self->config->{dbname},
                                        config   => $self->config,
                                        log      => $self->app->log,
                                        # authors  => \@authors,
                                        # modules  => \@modules,
                                        # versions => \@versions,
                                        # perl_versions => \@perl_versions,
                                        # recent   => $freshness,
                                        # start_date => $start_date,
                                        # end_date => $end_date,
                                        # count    => $count,
                                        # force_test => $force_test,
                                        # verbose  => $verbose,
                                        app => $self->app,
                                       );
    
};

helper sql => sub {
    my ($self) = @_;
    state $sql = $self->smoker->sql;
};

helper db => sub {
    my ($self) = @_;
    state $db = $self->sql->db;
};

plugin Minion => {SQLite => 'sqlite:'. app->config->{dbname}};
plugin 'Minion::Admin';

################

app->minion->add_task( test => sub { my ($job, @args) = @_;
                                     my ($result, @result_args) = $job->app->smoker->test($job, @args);
                                     if ($result eq 'success') {
                                         $job->finished(@result_args);
                                     } elsif ($result eq 'error') {
                                         $job->fail(@result_args);
                                     } else {
                                         # TODO: Better define why/when this can happen
                                         # $job->retry(@result_args);
                                     }
                                 } );

get '/modules' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT COUNT(*) AS count FROM releases')->hashes->first; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Database not configured or not populated'});
    }
};

get '/module/:modname' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT * FROM releasess WHERE name=?',
                                         $self->stash('modname'))->hashes->first; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'Module not found'});
    }
};

get '/tests/:modname' => sub {
    my $self = shift;

    my $result = eval { $self->db->query('SELECT * FROM tests WHERE dist_id=(SELECT id FROM releases WHERE name=?)',
                                         $self->stash('modname'))->hashes; };
    if (defined $result) {
        $self->render(json => $result);
    } else {
        $self->render(json => {error => 'No tests have been run, or Module not found'});
    }
};

# app->minion->add_task( update => sub { my ($job, @args) = @_;
#                                        my ($result, @result_args) = $job->app->smoker->update(@args);
#                                        if ($result eq 'success') {
#                                            $job->finished(@result_args);
#                                        } elsif ($result eq 'error') {
#                                            $job->fail(@result_args);
#                                        } else {
#                                            # TODO: Better define why/when this can happen
#                                            # $job->retry(@result_args);
#                                        }
#                                    } );

app->minion->add_task ( update => sub { my ($job, @args) = @_;
                                                my $results = $job->app->smoker->get_recent(@args);
                                                if (defined $results) {
                                                    # TODO: possibly:
                                                    # $job->app->minion->enqueue('check_regex', ... ?
                                                    $job->finished();
                                                } else {
                                                    $job->fail('Could not download updates list')
                                                }
                                            }
                              );

get '/update' => sub {
    my ($self) = @_;
    my $id = $self->minion->enqueue('update', {priority => 0});
    $self->render(json => {job => {task => 'update', id => $id}});
};

get '/update/*uri' => sub {
    my ($self) = @_;
    my $id = $self->minion->enqueue('update' => [$self->stash('uri')], {priority => 0});
    $self->render(json => {job => {task => 'update', id => $id}});
};

app->minion->add_task( apply => sub { my ($job, @args) = @_;
                                      apply( $job->app, @args);
                                      # probably call $job->finished($message) or $job->fail($message)
                                   } );

get '/apply' => sub {
    my ($self) = @_;
    my $id = $self->minion->enqueue('apply', {priority => 0});
    $self->render(json => {job => {task => 'apply', id => $id}});
};

get '/job/:id' => sub {
    my ($self) = @_;
    my $job = $self->minion->job($self->stash('id'));
    $self->render(json => $job->info);
};

del '/job/:id' => sub {
    my ($self) = @_;
    my $deleted = $self->minion->job($self->stash('id'))->remove;
    $self->render(json => {success => $deleted});
};

get '/jobs/stats' => sub {
    my ($self) = @_;
    my $stats = $self->minion->stats;
    $self->render(json => $stats);
};

app->start;

__DATA__
